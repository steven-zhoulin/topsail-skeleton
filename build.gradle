buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        //classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.steven'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    mybatisGenerator
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
//    implementation 'org.springframework.boot:spring-boot-starter-security' // 安全相关
    implementation 'org.springframework.boot:spring-boot-devtools' // 热发布
    implementation 'org.springframework.boot:spring-boot-starter-actuator' // 监控
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'commons-beanutils:commons-beanutils:1.9.3'


    // 代码补全
    implementation 'org.projectlombok:lombok:1.18.6'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.4'
    implementation "org.apache.commons:commons-lang3:3.8.1"
    runtime 'mysql:mysql-connector-java'

    // 文档和测试
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

//    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.mybatis.generator:mybatis-generator-core:1.3.5'

    // MyBatis 代码生成工具支持
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
    mybatisGenerator 'tk.mybatis:mapper:3.3.9'
    mybatisGenerator fileTree(include: ['*.jar'], dir: 'libs')

}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/myBatisGenerator/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/myBatisGenerator/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}